@page "/showtimes/delete"
@using BookingMovieSystem_Admin.Hub
@using Microsoft.AspNetCore.SignalR
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Showtime</h2>
    <hr />
    @if (showtime is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MovieId</dt>
            <dd class="col-sm-10">@showtime.MovieId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ScreenId</dt>
            <dd class="col-sm-10">@showtime.ScreenId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ShowDate</dt>
            <dd class="col-sm-10">@showtime.ShowDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ShowTime</dt>
            <dd class="col-sm-10">@showtime.ShowTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ExperienceType</dt>
            <dd class="col-sm-10">@showtime.ExperienceType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsSoldOut</dt>
            <dd class="col-sm-10">@showtime.IsSoldOut</dd>
        </dl>
        <EditForm method="post" Model="showtime" OnValidSubmit="DeleteShowtime" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(showtime is null)">Delete</button> |
            <a href="/showtimes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Showtime? showtime;

    [SupplyParameterFromQuery]
    private int ShowtimeId { get; set; }
    [Inject] private IHubContext<ShowTimeHub> HubContext { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        showtime = await context.Showtimes.FirstOrDefaultAsync(m => m.ShowtimeId == ShowtimeId);

        if (showtime is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteShowtime()
    {
        using var context = DbFactory.CreateDbContext();
        context.Showtimes.Remove(showtime!);
        await context.SaveChangesAsync();
        await HubContext.Clients.All.SendAsync("ReceiveDeleteNotification", showtime.ShowtimeId);
        NavigationManager.NavigateTo("/showtimes");
    }
}
