@page "/showtimes/create"
@using BookingMovieSystem_Admin.Hub
@using Microsoft.AspNetCore.SignalR
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Showtime</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Showtime" OnValidSubmit="AddShowtime" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="movieid" class="form-label">MovieId:</label> 
                <InputNumber id="movieid" @bind-Value="Showtime.MovieId" class="form-control" /> 
                <ValidationMessage For="() => Showtime.MovieId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="screenid" class="form-label">ScreenId:</label> 
                <InputNumber id="screenid" @bind-Value="Showtime.ScreenId" class="form-control" /> 
                <ValidationMessage For="() => Showtime.ScreenId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="showdate" class="form-label">ShowDate:</label> 
                <InputDate id="showdate" @bind-Value="Showtime.ShowDate" class="form-control" /> 
                <ValidationMessage For="() => Showtime.ShowDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="showtime" class="form-label">ShowTime:</label> 
                <InputDate id="showtime" @bind-Value="Showtime.ShowTime" class="form-control" /> 
                <ValidationMessage For="() => Showtime.ShowTime" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="experiencetype" class="form-label">ExperienceType:</label> 
                <InputText id="experiencetype" @bind-Value="Showtime.ExperienceType" class="form-control" /> 
                <ValidationMessage For="() => Showtime.ExperienceType" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="issoldout" class="form-label">IsSoldOut:</label> 
                <InputCheckbox id="issoldout" @bind-Value="Showtime.IsSoldOut" class="form-check-input" /> 
                <ValidationMessage For="() => Showtime.IsSoldOut" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/showtimes">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Showtime Showtime { get; set; } = new();
    [Inject] private IHubContext<ShowTimeHub> HubContext { get; set; } = default!;
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddShowtime()
    {
        using var context = DbFactory.CreateDbContext();
        context.Showtimes.Add(Showtime);
        await context.SaveChangesAsync();
        await HubContext.Clients.All.SendAsync("ReceiveAddNotification", Showtime);
        NavigationManager.NavigateTo("/showtimes");
    }
}
