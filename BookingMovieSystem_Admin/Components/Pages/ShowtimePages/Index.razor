@page "/showtimes"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@implements IAsyncDisposable
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@using OfficeOpenXml
@inject IJSRuntime JSRuntime
<PageTitle>Danh sách Showtimes</PageTitle>

<h1>Danh sách Showtimes</h1>

<p>
    <a href="showtimes/create" class="btn btn-primary btn-sm">Create New</a>
</p>
<p>
    <a class="btn btn-primary btn-sm" href="movies/create">Create New</a>
    <button class="btn btn-success btn-sm ms-2" @onclick="@ExportToExcel">Export to Excel</button>
</p>

<div class="mb-3 d-flex gap-3">
    <div class="flex-grow-1">
        <input class="form-control" style="max-width:600px" placeholder="Tìm kiếm ..." @bind="searchItem" />
    </div>
    <div class="flex-grow-1">
        <select class="form-control" @bind="filterIsSoldOut">
            <option value="">All</option>
            <option value="true">Yes</option>
            <option value="false">No</option>
        </select>
    </div>
    <div class="flex-grow-1">
        <select class="form-control" @bind="filterScreen">
            <option value="">All</option>
            @foreach (var screen in Screens)
            {
                <option value="@screen.ScreenId">@screen.ScreenName</option>
            }
        </select>
    </div>
    <div class="flex-grow-1">
        <select class="form-control" @bind="filterExperienceType">
            <option value="">All</option>
            @foreach (var type in ExperienceTypes)
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <button class="btn btn-primary mt-2" @onclick="OnSearchClicked">
        Tìm kiếm
    </button>
</div>

<!-- Bảng hiển thị các showtimes -->
@if (Showtimes.Any())
{
    <div class="table-responsive">
        <table class="table table-bordered table-striped table-hover">
            <thead>
                <tr>
                    <th>Movie</th>
                    <th>Screen</th>
                    <th>Show Date</th>
                    <th>Show Time</th>
                    <th>Experience Type</th>
                    <th>Is Sold Out</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var showtime in Showtimes)
                {
                    <tr>
                        <td>@showtime.Movie.Title</td>
                        <td>@showtime.Screen.ScreenName</td>
                        <td>@showtime.ShowDate.ToString("yyyy-MM-dd")</td>
                        <td>@showtime.ShowTime.ToString("HH:mm")</td>
                        <td>@showtime.ExperienceType</td>
                        <td>@(showtime.IsSoldOut ? "Yes" : "No")</td>
                        <td>
                            <a href="@($"showtimes/edit?showtimeid={showtime.ShowtimeId}")" class="btn btn-warning btn-sm">Edit</a> |
                            <a href="@($"showtimes/details?showtimeid={showtime.ShowtimeId}")" class="btn btn-info btn-sm">Details</a> |
                            <a href="@($"showtimes/delete?showtimeid={showtime.ShowtimeId}")" class="btn btn-danger btn-sm">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Phân trang -->
    <div class="text-center mt-3">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@IsFirstPage">Trước</button>
        <span>Trang @currentPage của @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@IsLastPage">Sau</button>
    </div>
}
else
{
    <p class="text-center text-muted">Không có showtimes nào để hiển thị.</p>
}

@code {
    private G5MovieTicketBookingSystemContext context = default!;
    private List<Showtime> Showtimes = new();
    private string searchItem = string.Empty;  // Từ khóa tìm kiếm
    private int currentPage = 1;  // Trang hiện tại
    private int pageSize = 5;  // Số lượng showtimes trên mỗi trang
    private int totalPages = 1; // Tổng số trang
    private int totalShowtimes = 0; // Tổng số showtimes

    private string filterIsSoldOut = string.Empty;
    private int? filterScreen = null;
    private string filterExperienceType = string.Empty;

    private List<Screen> Screens = new();  // Danh sách Screens để hiển thị trong dropdown
    private List<string> ExperienceTypes = new();  // Danh sách các ExperienceType để hiển thị trong dropdown

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadShowtimes();
        await LoadFilters();
    }

    private async Task LoadFilters()
    {
        // Load danh sách screens và experience types để hiển thị trong các dropdown
        Screens = await context.Screens.ToListAsync();
        ExperienceTypes = await context.Showtimes.Select(s => s.ExperienceType).Distinct().ToListAsync();
    }

    private async Task LoadShowtimes()
    {
        // Truy vấn cơ sở dữ liệu
        var query = context.Showtimes
            .Include(s => s.Movie)
            .Include(s => s.Screen)
            .AsQueryable();

        // Lọc theo các tiêu chí
        if (!string.IsNullOrEmpty(searchItem))
        {
            query = query.Where(s => EF.Functions.Like(s.Movie.Title, $"%{searchItem}%"));
        }

        if (!string.IsNullOrEmpty(filterIsSoldOut))
        {
            var isSoldOut = filterIsSoldOut == "true";
            query = query.Where(s => s.IsSoldOut == isSoldOut);
        }

        if (filterScreen.HasValue)
        {
            query = query.Where(s => s.ScreenId == filterScreen.Value);
        }

        if (!string.IsNullOrEmpty(filterExperienceType))
        {
            query = query.Where(s => s.ExperienceType == filterExperienceType);
        }

        // Tính tổng số showtimes
        totalShowtimes = await query.CountAsync();

        // Tính số trang
        totalPages = (int)Math.Ceiling(totalShowtimes / (double)pageSize);

        // Lấy dữ liệu cho trang hiện tại
        Showtimes = await query
            .Skip((currentPage - 1) * pageSize)  // Bỏ qua các bản ghi trước đó
            .Take(pageSize)  // Lấy số lượng bản ghi cho trang hiện tại
            .ToListAsync();
    }

    // Xử lý sự kiện khi nhấn nút "Tìm kiếm"
    private async Task OnSearchClicked()
    {
        currentPage = 1;  // Quay lại trang đầu tiên khi tìm kiếm
        await LoadShowtimes();
    }

    // Chuyển đến trang trước
    private async Task GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadShowtimes();
        }
    }

    // Chuyển đến trang sau
    private async Task GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadShowtimes();
        }
    }

    // Kiểm tra nếu đang ở trang đầu tiên
    private bool IsFirstPage => currentPage == 1;

    // Kiểm tra nếu đang ở trang cuối cùng
    private bool IsLastPage => currentPage == totalPages;

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
    private async Task ExportToExcel()
    {
        try
        {
            // Load all showtimes (not just the paged ones) for export
            var allShowtimes = await context.Showtimes
                .Include(s => s.Movie)
                .Include(s => s.Screen)
                .OrderBy(s => s.ShowtimeId)
                .ToListAsync();

            // Set EPPlus license context (required for non-commercial use)
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            // Create a new Excel package in memory
            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Showtimes");

                // Add headers
                worksheet.Cells[1, 1].Value = "Movie Title";
                worksheet.Cells[1, 2].Value = "Movie Title";
                worksheet.Cells[1, 3].Value = "Screen Name";
                worksheet.Cells[1, 4].Value = "Show Date";
                worksheet.Cells[1, 5].Value = "Show Time";
                worksheet.Cells[1, 6].Value = "Experience Type";
                worksheet.Cells[1, 7].Value = "Sold Out";

                // Style the header row
                using (var range = worksheet.Cells[1, 1, 1, 6])
                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                }

                // Add data
                for (int i = 0; i < allShowtimes.Count; i++)
                {
                    var showtime = allShowtimes[i];
                    worksheet.Cells[i + 2, 1].Value = showtime.ShowtimeId;
                    worksheet.Cells[i + 2, 2].Value = showtime.Movie?.Title ?? "N/A";
                    worksheet.Cells[i + 2, 3].Value = showtime.Screen?.ScreenName ?? "N/A";
                    worksheet.Cells[i + 2, 4].Value = showtime.ShowDate.ToString("yyyy-MM-dd");
                    worksheet.Cells[i + 2, 5].Value = showtime.ShowTime.ToString("HH:mm");
                    worksheet.Cells[i + 2, 6].Value = showtime.ExperienceType;
                    worksheet.Cells[i + 2, 7].Value = showtime.IsSoldOut ? "Yes" : "No";
                }

                // Auto-fit columns
                worksheet.Cells.AutoFitColumns();

                // Convert the Excel package to a byte array
                var excelData = package.GetAsByteArray();

                // Convert to base64 for download
                var base64 = Convert.ToBase64String(excelData);
                var fileName = $"Showtimes_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";

                // Trigger download using JavaScript
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64);
            }
        }
        catch (Exception ex)
        {
        
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
            StateHasChanged();
        }
    }

}
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    // Kết nối đến SignalR Hub
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/showTimeHub")
        .build();

    // Bắt đầu kết nối SignalR
    connection.start().catch(function (err) {
        console.error("❌ SignalR Connection Error:", err.toString());
    });

    // Lắng nghe sự kiện cập nhật
    connection.on("ReceiveUpdateNotification", function (showtime) {
        location.reload();
    });
    connection.on("ReceiveAddNotification", function (showtime) {
        location.reload();
    });
    connection.on("ReceiveDeleteNotification", function (showtime) {
        location.reload();
    });
    window.downloadFile = (fileName, contentType, base64Data) => {
           const linkSource = `data:${contentType};base64,${base64Data}`;
           const downloadLink = document.createElement("a");
           downloadLink.href = linkSource;
           downloadLink.download = fileName;
           downloadLink.click();
       };
</script>