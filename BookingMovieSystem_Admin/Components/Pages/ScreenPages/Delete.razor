@page "/screens/delete"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Screen</h2>
    <hr />
    @if (screen is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">CinemaId</dt>
            <dd class="col-sm-10">@screen.CinemaId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ScreenName</dt>
            <dd class="col-sm-10">@screen.ScreenName</dd>
        </dl>
        <EditForm method="post" Model="screen" OnValidSubmit="DeleteScreen" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(screen is null)" onclick="return confirm('Are you sure you want to delete this Screen?')">Delete</button> |
            <a href="/screens">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Screen? screen;

    [SupplyParameterFromQuery]
    private int ScreenId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        screen = await context.Screens.FirstOrDefaultAsync(m => m.ScreenId == ScreenId);

        if (screen is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteScreen()
    {
        using var context = DbFactory.CreateDbContext();
        var showTime = await context.Showtimes.FirstOrDefaultAsync(m => m.ScreenId == ScreenId);
        context.Showtimes.Remove(showTime);
        context.Screens.Remove(screen!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/screens");
    }
}
