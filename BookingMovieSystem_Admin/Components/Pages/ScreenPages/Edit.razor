@page "/screens/edit"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Edit Screen</PageTitle>

<h1>Edit Screen</h1>

@if (Screen is null || EditContext is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <!-- ✅ Thêm FormName để tránh lỗi -->
            <EditForm EditContext="EditContext" OnValidSubmit="UpdateScreen" FormName="editScreenForm">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />

                <input type="hidden" name="Screen.ScreenId" value="@Screen.ScreenId" />

                <div class="mb-3">
                    <label for="screenname" class="form-label">Screen Name:</label>
                    <InputText id="screenname" @bind-Value="Screen.ScreenName" class="form-control" />
                    <ValidationMessage For="@(() => Screen.ScreenName)" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/screens">Back to List</a>
</div>

@code {
    private Screen? Screen;
    private EditContext? EditContext;

    [SupplyParameterFromQuery]
    private int ScreenId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Screen = await context.Screens.FirstOrDefaultAsync(m => m.ScreenId == ScreenId);

        if (Screen is not null)
        {
            EditContext = new EditContext(Screen);
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateScreen()
    {
        using var context = DbFactory.CreateDbContext();
        var existingScreen = await context.Screens.FirstOrDefaultAsync(s => s.ScreenId == Screen!.ScreenId);

        if (existingScreen is not null)
        {
            existingScreen.ScreenName = Screen.ScreenName;

            context.Entry(existingScreen).State = EntityState.Modified;
            await context.SaveChangesAsync();
            Console.WriteLine($"✅ Updated ScreenName to: {existingScreen.ScreenName}");
        }
        else
        {
            Console.WriteLine($"❌ Screen ID {Screen.ScreenId} not found.");
        }

        NavigationManager.NavigateTo("/screens");
    }
}
