@page "/movies"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@implements IAsyncDisposable
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory

<PageTitle>Movies</PageTitle>

<h1>Movies</h1>

<p>
    <a class="btn btn-primary btn-sm" href="movies/create">Create New</a>
</p>

<!-- Tìm kiếm và lọc theo Genre -->
<div class="mb-3 d-flex align-items-center gap-3">
    <!-- Tìm kiếm theo tiêu đề phim -->
    <input class="form-control" style="max-width:600px" placeholder="Tìm kiếm ..." @bind="searchItem" />

    <!-- Lọc theo Genre -->
    <select class="form-control" style="max-width: 200px" @bind="selectedGenre">
        <option value="">Chọn thể loại phim...</option>
        @foreach (var genre in genres)
        {
            <option value="@genre">@genre</option>
        }
    </select>

    <!-- Nút Tìm kiếm chung -->
    <button class="btn btn-primary mt-2" style="max-width:300px" @onclick="OnSearchClicked">
        Tìm kiếm
    </button>
</div>

<!-- Bảng hiển thị các bộ phim -->
<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th>Genre</th>
                <th>Duration</th>
                <th>Language</th>
                <th>Rating</th>
                <th>Release Date</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in Movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.Genre</td>
                    <td>@movie.Duration</td>
                    <td>@movie.Language</td>
                    <td>@movie.Rating</td>
                    <td>@movie.ReleaseDate.ToString("yyyy-MM-dd")</td>
                    <td>@movie.Description</td>
                    <td>
                        <a class="btn btn-warning btn-sm" href="@($"movies/edit?movieid={movie.MovieId}")">Edit</a> |
                        <a class="btn btn-info btn-sm" href="@($"movies/details?movieid={movie.MovieId}")">Details</a> |
                        <a class="btn btn-danger btn-sm" href="@($"movies/delete?movieid={movie.MovieId}")">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Phân trang -->
<div class="text-center mt-3">
    <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@IsFirstPage">Trước</button>
    <span>Trang @currentPage của @totalPages</span>
    <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@IsLastPage">Sau</button>
</div>

@code {
    private List<Movie> Movies = new();
    private List<string> genres = new(); // Danh sách thể loại phim
    private string searchItem = string.Empty;  // Từ khóa tìm kiếm
    private string selectedGenre = string.Empty; // Thể loại phim đã chọn
    private int currentPage = 1;  // Trang hiện tại
    private int pageSize = 5;  // Số lượng bộ phim trên mỗi trang
    private int totalPages = 1; // Tổng số trang
    private int totalMovies = 0; // Tổng số bộ phim

    protected override async Task OnInitializedAsync()
    {
        await LoadGenres(); // Tải danh sách thể loại phim
        await LoadMovies(); // Tải danh sách bộ phim
    }

    private async Task LoadGenres()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        genres = await context.Movies
            .Select(m => m.Genre)
            .Distinct()  // Lấy các thể loại phim duy nhất
            .ToListAsync();
    }

    private async Task LoadMovies()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var query = context.Movies.AsNoTracking();

        // Lọc theo từ khóa tìm kiếm
        if (!string.IsNullOrEmpty(searchItem))
        {
            query = query.Where(s => EF.Functions.Like(s.Title, $"%{searchItem}%"));
        }

        // Lọc theo thể loại nếu có
        if (!string.IsNullOrEmpty(selectedGenre))
        {
            query = query.Where(s => s.Genre == selectedGenre);
        }

        // Tính tổng số bộ phim
        totalMovies = await query.CountAsync();

        // Tính số trang
        totalPages = (int)Math.Ceiling(totalMovies / (double)pageSize);

        // Lấy dữ liệu cho trang hiện tại
        Movies = await query
            .Skip((currentPage - 1) * pageSize)  // Bỏ qua các bản ghi trước đó
            .Take(pageSize)  // Lấy số lượng bản ghi cho trang hiện tại
            .ToListAsync();
    }

    // Xử lý sự kiện khi nhấn nút "Tìm kiếm"
    private async Task OnSearchClicked()
    {
        currentPage = 1;  // Quay lại trang đầu tiên khi tìm kiếm
        await LoadMovies();
    }

    // Chuyển đến trang trước
    private async Task GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadMovies();
        }
    }

    // Chuyển đến trang sau
    private async Task GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadMovies();
        }
    }

    // Kiểm tra nếu đang ở trang đầu tiên
    private bool IsFirstPage => currentPage == 1;

    // Kiểm tra nếu đang ở trang cuối cùng
    private bool IsLastPage => currentPage == totalPages;

    public async ValueTask DisposeAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        await context.DisposeAsync();
    }
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/cinemaHub")
        .build();

    connection.start().catch(function (err) {
        console.error("❌ SignalR Connection Error:", err.toString());
    });

    connection.on("ReceiveUpdateNotification", function (cinema) {
        location.reload();
    });

    connection.on("ReceiveAddNotification", function (cinema) {
        location.reload();
    });

    connection.on("ReceiveDeleteNotification", function (cinema) {
        location.reload();
    });
</script>
