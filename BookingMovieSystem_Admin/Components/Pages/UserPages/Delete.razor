@page "/users/delete"
@using BookingMovieSystem_Admin.Hub
@using Microsoft.AspNetCore.SignalR
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>User</h2>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@user.Username</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@user.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@user.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Fullname</dt>
            <dd class="col-sm-10">@user.Fullname</dd>
        </dl>
        <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(user is null)">Delete</button> |
            <a href="/users">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private User? user;

    [SupplyParameterFromQuery]
    private int UserId { get; set; }
    [Inject] private IHubContext<UserHub> HubContext { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.Users.FirstOrDefaultAsync(m => m.UserId == UserId);

        if (user is null)
        {
            NavigationManager.NavigateTo("users");
        }
    }

    private async Task DeleteUser()
    {
        using var context = DbFactory.CreateDbContext();

        // Kiểm tra nếu người dùng tồn tại trước khi xóa
        if (user != null)
        {
            context.Users.Remove(user); // Xóa người dùng khỏi cơ sở dữ liệu
            await context.SaveChangesAsync(); // Lưu thay đổi vào cơ sở dữ liệu

            // Gửi thông báo cho tất cả các client qua SignalR
            await HubContext.Clients.All.SendAsync("ReceiveDeleteNotification", user.UserId);

            // Chuyển hướng về trang danh sách người dùng
            NavigationManager.NavigateTo("/users");
        }
       
    }

}
