@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" @bind-Value="User.Username" class="form-control" />
                <ValidationMessage For="() => User.Username" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="User.Email" class="form-control" />
                <ValidationMessage For="() => User.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" type="password" @bind-Value="User.Password" class="form-control" />
                <ValidationMessage For="() => User.Password" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="fullname" class="form-label">Fullname:</label>
                <InputText id="fullname" @bind-Value="User.Fullname" class="form-control" />
                <ValidationMessage For="() => User.Fullname" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="role" class="form-label">Select Role:</label>
                <select id="role" class="form-select" @bind="SelectedRoleId">
                    <option value="">-- Select Role --</option>
                    @foreach (var role in AvailableRoles)
                    {
                        <option value="@role.RoleId">@role.RoleName</option>
                    }
                </select>
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();
    private List<Role> AvailableRoles = new();
    private int SelectedRoleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        AvailableRoles = await context.Roles.ToListAsync();
    }

    private async Task AddUser()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        context.Users.Add(User);
        await context.SaveChangesAsync();

        Console.WriteLine($"DEBUG: User ID after save: {User.UserId}");

        if (User.UserId <= 0)
        {
            Console.WriteLine("❌ ERROR: UserId not generated!");
            return;
        }

        if (SelectedRoleId > 0)
        {
            var selectedRole = await context.Roles.FindAsync(SelectedRoleId);

            if (selectedRole != null)
            {
                Console.WriteLine($"DEBUG: Role found: {selectedRole.RoleName}");

                context.Users.Attach(User);
                User.Roles.Add(selectedRole);
                await context.SaveChangesAsync();

                Console.WriteLine("✅ SUCCESS: Role added to User!");
            }
            else
            {
                Console.WriteLine("❌ ERROR: Role not found!");
            }
        }

        NavigationManager.NavigateTo("/users");
    }
}
