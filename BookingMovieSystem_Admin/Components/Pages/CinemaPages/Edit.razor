@page "/cinemas/edit"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Edit</PageTitle>

<h1>Edit Cinema</h1>

<h2>Cinema</h2>
<hr />
@if (Cinema is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Cinema" OnValidSubmit="UpdateCinema">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Cinema.CinemaId" value="@Cinema.CinemaId" />
                <div class="mb-3">
                    <label for="cinemaname" class="form-label">Cinema Name:</label>
                    <InputText id="cinemaname" @bind-Value="Cinema.CinemaName" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Cinema.CinemaName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">City:</label>
                    <InputText id="city" @bind-Value="Cinema.City" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Cinema.City" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Cinema.Address" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Cinema.Address" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>

    <h2>Screens in this Cinema</h2>
    <hr />
    @if (Screens is null || Screens.Count == 0)
    {
        <p><em>No screens available for this cinema.</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Screen Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var screen in Screens)
                {
                    <tr>
                        <td>@screen.ScreenName</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => ConfirmDeleteScreen(screen.ScreenId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h2>All Screens (Available to Add)</h2>
    <hr />
    @if (AllScreens is null || AllScreens.Count == 0)
    {
        <p><em>No screens available.</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Screen Name</th>
                    <th>Cinema Assigned</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var screen in AllScreens)
                {
                    <tr>
                        <td>@screen.ScreenName</td>
                        <td>
                            @(screen.CinemaId == null ? "Not Assigned" : $"Cinema {screen.CinemaId}")
                        </td>
                        <td>
                            <button class="btn btn-success" @onclick="() => AddScreenToCinema(screen.ScreenId)">Add</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<div>
    <a href="/cinemas">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CinemaId { get; set; }

    private Cinema? Cinema { get; set; }
    private List<Screen> Screens { get; set; } = new();
    private List<Screen> AllScreens { get; set; } = new(); // All screens list

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Cinema ??= await context.Cinemas.FirstOrDefaultAsync(m => m.CinemaId == CinemaId);

        if (Cinema is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Get list of screens associated with the current cinema
        Screens = await context.Screens.Where(s => s.CinemaId == CinemaId).ToListAsync();

        // Get list of all screens (including unassigned ones)
        AllScreens = await context.Screens.ToListAsync();
    }

    private async Task UpdateCinema()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Cinema!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CinemaExists(Cinema!.CinemaId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/cinemas");
    }

    private bool CinemaExists(int cinemaid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Cinemas.Any(e => e.CinemaId == cinemaid);
    }

    private async Task ConfirmDeleteScreen(int screenId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this screen?");
        if (confirmed)
        {
            using var context = DbFactory.CreateDbContext();
            var screen = await context.Screens.FindAsync(screenId);

            if (screen != null)
            {
                await context.SaveChangesAsync();

                Screens.Remove(screen);
                StateHasChanged();
            }
        }
    }

    private async Task AddScreenToCinema(int screenId)
    {
        using var context = DbFactory.CreateDbContext();
        var screen = await context.Screens.FindAsync(screenId);

        if (screen != null)
        {
            screen.CinemaId = CinemaId;
            await context.SaveChangesAsync();

            Screens.Add(screen);
            StateHasChanged();
        }
    }
}
