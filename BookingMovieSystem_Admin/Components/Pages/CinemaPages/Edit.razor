@page "/cinemas/edit"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Chỉnh sửa Rạp Chiếu Phim</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-center">Chỉnh sửa Rạp Chiếu Phim</h1>

    @if (Cinema is null)
    {
        <p class="text-muted text-center"><em>Đang tải dữ liệu...</em></p>
    }
    else
    {
        <div class="card shadow-lg">
            <div class="card-body">
                <EditForm method="post" Model="Cinema" OnValidSubmit="UpdateCinema">
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" />
                    <input type="hidden" name="Cinema.CinemaId" value="@Cinema.CinemaId" />

                    <div class="mb-3">
                        <label for="cinemaname" class="form-label">Tên Rạp:</label>
                        <InputText id="cinemaname" @bind-Value="Cinema.CinemaName" class="form-control" />
                        <ValidationMessage For="() => Cinema.CinemaName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="city" class="form-label">Thành phố:</label>
                        <InputText id="city" @bind-Value="Cinema.City" class="form-control" />
                        <ValidationMessage For="() => Cinema.City" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="address" class="form-label">Địa chỉ:</label>
                        <InputText id="address" @bind-Value="Cinema.Address" class="form-control" />
                        <ValidationMessage For="() => Cinema.Address" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-primary">💾 Lưu</button>
                </EditForm>
            </div>
        </div>

        <div class="mt-5">
            <h2 class="text-center">Danh sách Phòng Chiếu</h2>

            @if (Screens is null || !Screens.Any())
            {
                <p class="text-muted text-center"><em>Không có phòng chiếu nào.</em></p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Tên Phòng</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (screen, index) in Screens.Select((value, i) => (value, i + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@screen.ScreenName</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteScreen(screen.ScreenId)">🗑️ Xóa</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <div class="mt-3">
                <h4>Thêm Phòng Chiếu</h4>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Nhập tên phòng" @bind="NewScreenName">
                    <button class="btn btn-success" @onclick="AddScreen">➕ Thêm</button>
                </div>
            </div>
        </div>
    }

    <div class="mt-4">
        <a href="/cinemas" class="btn btn-secondary">⬅️ Quay lại danh sách</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CinemaId { get; set; }

    private Cinema? Cinema { get; set; }
    private List<Screen> Screens = new();
    private string NewScreenName = "";

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        // Lấy thông tin rạp
        Cinema = await context.Cinemas.FirstOrDefaultAsync(m => m.CinemaId == CinemaId);
        if (Cinema is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Lấy danh sách phòng chiếu của rạp
        Screens = await context.Screens
            .Where(s => s.CinemaId == CinemaId)
            .ToListAsync();
    }

    private async Task UpdateCinema()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        context.Attach(Cinema!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CinemaExists(Cinema!.CinemaId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/cinemas");
    }

    private async Task AddScreen()
    {
        if (!string.IsNullOrWhiteSpace(NewScreenName))
        {
            using var context = await DbFactory.CreateDbContextAsync();

            var newScreen = new Screen
                {
                    CinemaId = CinemaId,
                    ScreenName = NewScreenName
                };

            context.Screens.Add(newScreen);
            await context.SaveChangesAsync();

            Screens.Add(newScreen);
            NewScreenName = ""; // Reset input
        }
    }

    private async Task DeleteScreen(int screenId)
    {
        using var context = await DbFactory.CreateDbContextAsync();

        var screen = await context.Screens.FindAsync(screenId);
        if (screen != null)
        {
            context.Screens.Remove(screen);
            await context.SaveChangesAsync();
            Screens.Remove(screen);
        }
    }

    private bool CinemaExists(int cinemaid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Cinemas.Any(e => e.CinemaId == cinemaid);
    }
}
