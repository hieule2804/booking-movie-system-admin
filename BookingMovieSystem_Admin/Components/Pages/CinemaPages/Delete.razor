@page "/cinemas/delete"
@using BookingMovieSystem_Admin.Hub
@using Microsoft.AspNetCore.SignalR
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@inject IDbContextFactory<BookingMovieSystem_Admin.Models.G5MovieTicketBookingSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Cinema</h2>
    <hr />
    @if (cinema is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">CinemaName</dt>
            <dd class="col-sm-10">@cinema.CinemaName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@cinema.City</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@cinema.Address</dd>
        </dl>
        <EditForm method="post" Model="cinema" OnValidSubmit="DeleteCinema" FormName="delete">
            <button type="submit" class="btn btn-danger" disabled="@(cinema is null)" onclick="return confirm('Are you sure you want to delete this Cinema?')">Delete</button> |
            <a href="/cinemas">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Cinema? cinema;

    [SupplyParameterFromQuery]
    private int CinemaId { get; set; }
    [Inject] private IHubContext<CinemaHub> HubContext { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        cinema = await context.Cinemas.FirstOrDefaultAsync(m => m.CinemaId == CinemaId);

        if (cinema is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCinema()
    {
        using var context = DbFactory.CreateDbContext();

        var listCinemaScreen = await context.Screens.Where(cs => cs.CinemaId == cinema!.CinemaId).ToListAsync();
        foreach (var screen in listCinemaScreen)
        {
            var showtimes = await context.Showtimes.Where(s => s.ScreenId == screen.ScreenId).ToListAsync();
            context.Showtimes.RemoveRange(showtimes);
        }

        context.Screens.RemoveRange(listCinemaScreen);
        context.Cinemas.Remove(cinema!);

        await context.SaveChangesAsync();
        await HubContext.Clients.All.SendAsync("ReceiveDeleteNotification", cinema.CinemaId);
        NavigationManager.NavigateTo("/cinemas");
    }
}
