@page "/screenseats"
@using Microsoft.EntityFrameworkCore
@using BookingMovieSystem_Admin.Models
@implements IAsyncDisposable
@inject IDbContextFactory<G5MovieTicketBookingSystemContext> DbFactory

<PageTitle>Screen Seats</PageTitle>

<div class="container mt-4">
    <h1 class="text-primary text-center">Screen Seats</h1>

    <p class="text-end">
        <a href="screenseats/create" class="btn btn-success">Create New</a>
    </p>

    <!-- Tìm kiếm và lọc theo SeatType -->
    <div class="mb-3 d-flex align-items-center gap-3">
        <!-- Tìm kiếm -->
        <input class="form-control" style="max-width:600px" placeholder="Tìm kiếm ..." @bind="searchItem" />

        <!-- Lọc theo loại ghế -->
        <select class="form-control" style="max-width: 200px" @bind="selectedSeatType">
            <option value="">Chọn loại ghế...</option>
            @foreach (var seatType in seatTypes)
            {
                <option value="@seatType.SeatTypeName">@seatType.SeatTypeName</option>
            }
        </select>

        <!-- Nút tìm kiếm -->
        <button class="btn btn-primary mt-2" style="max-width:300px" @onclick="OnSearchClicked">
            Tìm kiếm
        </button>
    </div>

    <!-- Bảng hiển thị các ghế màn hình -->
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead>
                <tr>
                    <th>Seat Label</th>
                    <th>Seat Type</th>
                    <th>Base Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var screenseat in ScreenSeats)
                {
                    <tr>
                        <td>@screenseat.SeatLabel</td>
                        <td>@screenseat.SeatType.SeatTypeName</td>
                        <td>@screenseat.SeatType.BasePrice</td>
                        <td>
                            <div class="d-flex justify-content-center gap-2">
                                <a href="@($"screenseats/edit?screenseatid={screenseat.ScreenSeatId}")" class="btn btn-warning btn-sm">Edit</a>
                                <a href="@($"screenseats/details?screenseatid={screenseat.ScreenSeatId}")" class="btn btn-info btn-sm">Details</a>
                                <a href="@($"screenseats/delete?screenseatid={screenseat.ScreenSeatId}")" class="btn btn-danger btn-sm">Delete</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Phân trang -->
    <div class="text-center mt-3">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@IsFirstPage">Trước</button>
        <span>Trang @currentPage của @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@IsLastPage">Sau</button>
    </div>
</div>

@code {
    private List<ScreenSeat> ScreenSeats = new();  // Danh sách các ghế màn hình
    private List<SeatType> seatTypes = new(); // Danh sách các loại ghế
    private string searchItem = string.Empty;  // Từ khóa tìm kiếm
    private string selectedSeatType = string.Empty; // Loại ghế đã chọn
    private int currentPage = 1;  // Trang hiện tại
    private int pageSize = 5;  // Số lượng ghế trên mỗi trang
    private int totalPages = 1; // Tổng số trang
    private int totalSeats = 0; // Tổng số ghế

    // Tải dữ liệu khi trang được khởi tạo
    protected override async Task OnInitializedAsync()
    {
        await LoadSeatTypes(); // Tải danh sách loại ghế
        await LoadScreenSeats(); // Tải tất cả ghế màn hình mà không có lọc
    }

    private async Task LoadSeatTypes()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        seatTypes = await context.SeatTypes.ToListAsync(); // Lấy tất cả loại ghế
    }

    private async Task LoadScreenSeats()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        // Truy vấn cơ sở dữ liệu mà không có điều kiện lọc
        var query = context.ScreenSeats
            .Include(s => s.SeatType)
            .AsNoTracking();

        // Lấy tất cả ghế màn hình mà không có lọc tìm kiếm hoặc lọc loại ghế
        ScreenSeats = await query.ToListAsync();

        // Tính tổng số ghế
        totalSeats = ScreenSeats.Count;

        // Tính số trang (số lượng ghế chia cho pageSize)
        totalPages = (int)Math.Ceiling(totalSeats / (double)pageSize);

        // Phân trang (lấy dữ liệu cho trang hiện tại)
        ScreenSeats = ScreenSeats.Skip((currentPage - 1) * pageSize)
                                 .Take(pageSize)
                                 .ToList();
    }

    // Xử lý sự kiện khi nhấn nút "Tìm kiếm"
    private async Task OnSearchClicked()
    {
        await LoadScreenSeats(); // Tải lại dữ liệu khi có tìm kiếm
    }

    // Chuyển đến trang trước
    private async Task GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadScreenSeats();
        }
    }

    // Chuyển đến trang sau
    private async Task GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadScreenSeats();
        }
    }

    // Kiểm tra nếu đang ở trang đầu tiên
    private bool IsFirstPage => currentPage == 1;

    // Kiểm tra nếu đang ở trang cuối cùng
    private bool IsLastPage => currentPage == totalPages;

    public async ValueTask DisposeAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        await context.DisposeAsync();
    }
}
